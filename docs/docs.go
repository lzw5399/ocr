// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/ocr/base64": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ocr"
                ],
                "summary": "OCR识别BASE64格式的图片",
                "parameters": [
                    {
                        "description": "request",
                        "name": "file",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Base64Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    }
                }
            }
        },
        "/api/ocr/file": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ocr"
                ],
                "summary": "OCR识别上传的整张图片",
                "parameters": [
                    {
                        "type": "file",
                        "description": "图片文件",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "可选项: 指定要识别的语言种类，如eng(英文) chi_sim(简体中文)，可以用逗号隔开指定多个, 不指定默认是eng",
                        "name": "languages",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "可选项: 为空检测全部字符。如果填写，仅会检测白名单之内的字符",
                        "name": "whitelist",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "可选项: 是否开始HOCR，一般默认为false",
                        "name": "hocrMode",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    }
                }
            }
        },
        "/api/ocr/scan-crop-file": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ocr"
                ],
                "summary": "OCR识别像素点裁剪之后的图片文字",
                "parameters": [
                    {
                        "type": "file",
                        "description": "图片文件",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "裁剪像素点。必须是下面格式的合法json字符串： [{ pointA: {x: 127, y: 249}, pointB: {x: 983, y: 309}}]",
                        "name": "matrixPixels",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "可选项: 指定要识别的语言种类，如eng(英文) chi_sim(简体中文)，可以用逗号隔开指定多个, 不指定默认是eng",
                        "name": "languages",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "可选项: 为空检测全部字符。如果填写，仅会检测白名单之内的字符",
                        "name": "whitelist",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "可选项: 是否开始HOCR，一般默认为false",
                        "name": "hocrMode",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HttpResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request.Base64Request": {
            "type": "object",
            "required": [
                "base64"
            ],
            "properties": {
                "base64": {
                    "type": "string"
                },
                "hocrMode": {
                    "type": "boolean"
                },
                "languages": {
                    "type": "string"
                },
                "whitelist": {
                    "type": "string"
                }
            }
        },
        "response.HttpResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "object"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
